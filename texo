#!/bin/bash

##############################
######## CONFIG BEGIN ########
##############################

# Project Name
PROJ="default"

# Pick a compiler (default: clang)
CC="default"

# Pick a linker (ld | lld)
LD="-fuse-ld=default"

# List source files here
SRC="default"

# Header directory
HEADERS="headers/*.h"

# Pick a C standard (c89 | c99 | c11 | c17 | c18 | c2x)
CSTD="-std=c18"

# Default warning flags
STDCFLAGS="-Wall -Wextra -pedantic"

# Optimization (-Oz | -Os | -O0 | -O1 | -O2 | -O3 | -Ofast)
OPTFLAGS="-O3"

# Debug flags
DEBUG="-g3"

# Extra warnings
EXTRAFLAGS="-Wshadow -Wdouble-promotion -Wconversion -Wpadded"

# Linker flags. Popular options (-lm | -lncurses)
LDFLAGS=""

# static analyzer to use (clang-analyzer | infer | none)
ANALYZER="clang-analyzer"


############################
######## CONFIG END ########
############################


# global variables
INFER="./tools/infer-linux64-v1.1.0/bin/infer"

function texo_help() {
    clear
    #TODO: beautify
    echo -e "

████████╗███████╗██╗  ██╗ ██████╗
╚══██╔══╝██╔════╝╚██╗██╔╝██╔═══██╗
   ██║   █████╗   ╚███╔╝ ██║   ██║
   ██║   ██╔══╝   ██╔██╗ ██║   ██║
   ██║   ███████╗██╔╝ ██╗╚██████╔╝
   ╚═╝   ╚══════╝╚═╝  ╚═╝ ╚═════╝
                                  "
    echo -e "Usage:\n\ttexo [command]\n"
    echo -e "Available commands:\n"
    echo -e "init:\tinit | i\n"
    echo -e "shell:\tshell | sh\n"
    echo -e "fetch latest changes:\tfetch | f | update | u\n"
    echo -e "build:\tbuild | c | com | compile\n"
    echo -e "clean:\tclean\n"
    echo -e "tidy:\ttidy | t\n"
    echo -e "analyze:\tanalyze | lint | a | l\n"
}

function texo_config_check(){
    local def="default"
    if [[ $PROJ = $def || $CC = $def || $LD = "-fuse-ld=default" || $SRC = $def ]]; then
        echo -e "INFO: please visit the config section before invoking texo\n"
        exit
    fi
}

function texo_init(){
    echo -e "INFO: creating folders\n"
    mkdir -p static-analysis tools headers
    #TODO: make this user configurable
    echo -e "INFO: write shell.nix\n"
    echo "
{ pkgs ? import <nixpkgs> {} }:
pkgs.mkShell {
  buildInputs = [
    pkgs.clang_13
    pkgs.clang-tools
    pkgs.clang-analyzer
    pkgs.lldb
    pkgs.lld_13
    pkgs.man
    pkgs.man-pages
    pkgs.bashInteractive
  ];
}
" > shell.nix

    local analyzer_infer="infer"
    local analyzer_clang="clang-analyzer"
    if [[ $ANALYZER = $analyzer_infer ]]; then
        echo -e "INFO: downloading and installing infer\n"
        curl -o tools/infer-1.1.0.tar.xz -L https://github.com/facebook/infer/releases/download/v1.1.0/infer-linux64-v1.1.0.tar.xz
        tar -xf tools/infer-1.1.0.tar.xz -C tools/
        rm tools/infer-1.1.0.tar.xz
    elif [[ $ANALYZER = $analyzer_clang ]]; then
        echo -e "INFO: using clang static analyzer\n"
    else
        echo -e "INFO: no static analyzer configured\n"
    fi
}

function texo_shell(){
    #TODO: maybe use --pure
    echo -e "INFO: entering nix-shell\n"
    nix-shell shell.nix
}

function texo_fetch(){
    set -xe
    git reset --hard
    git pull --rebase
}

function texo_compile(){
    set -xe
    $CC $LD $CSTD $STDFLAGS $OPTFLAGS $DEBUG $EXTRAFLAGS $LDFLAGS -o $PROJ $SRC
}

function texo_clean(){
    set -xe
    rm -rfv *.o *.out $PROJ *~ infer-out
}

function texo_tidy(){
    set -xe
    clang-tidy $SRC $HEADERS
}

function texo_analyze(){
    local analyzer_infer="infer"
    local analyzer_clang="clang-analyzer"
    set -xe
    if [[ $ANALYZER = $analyzer_infer ]]; then
        $INFER run --reactive --continue -- $CC $LDFLAGS $LD $SRC -o static-analysis/inf.out
    elif [[ $ANALYZER = $analyzer_clang ]]; then
        #TODO: check clang-analyzer if this really works
        scan-build -k -v --force-analyze-debug-code -o static-analysis/ $CC $SRC
    elif [[ $ANALYZER = "none" ]]; then
        echo -e "INFO: no static analyzer configured\n"
    else
        echo -e "ERROR: not a valid option: "
        echo -e $ANALYZER
        echo -e "\n"
    fi
}

case $1 in
    init | i)
        texo_config_check
        texo_init
        ;;
    shell | sh)
        texo_config_check
        texo_shell
        ;;
    fetch | f | update | u)
        texo_config_check
        texo_fetch
        ;;
    com | compile | c | build)
        texo_config_check
        texo_compile
        ;;
    clean)
        texo_config_check
        texo_clean
        ;;
    tidy | t)
        texo_config_check
        texo_tidy
        ;;
    analyze | lint | a | l)
        texo_config_check
        texo_analyze
        ;;
    *)
        clear
        texo_help
        ;;
esac
